name: Build and Publish Docker Image

on:
  push:
    branches: [ "**" ]
    tags: [ 'v*' ]
  pull_request:
  branches: [ "**" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: CI context
        run: |
          echo "event=${{ github.event_name }} ref=${{ github.ref }} sha=${{ github.sha }} actor=${{ github.actor }} repo=${{ github.repository }}"

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ toLower(env.IMAGE_NAME) }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build (PR only, local load)
        if: github.event_name == 'pull_request'
        run: |
          docker version
          docker buildx version || true
          docker build --pull --tag test-local:pr .

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          pull: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            USER_UID=1000
            USER_GID=1000

